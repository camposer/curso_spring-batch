<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>springbatch</groupId>
	<artifactId>basico</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>xml2csv</name>
	<url>http://maven.apache.org</url>

	<properties>
		<!-- general project settings -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.java.version>1.7</project.java.version>
		<!-- maven-compiler-plugin settings -->
		<maven.compiler.debug>true</maven.compiler.debug>
		<maven.compiler.optimize>false</maven.compiler.optimize>
		<!-- re-used dependency version data -->
		<spring.batch.version>2.1.8.RELEASE</spring.batch.version>
		<spring.framework.version>3.1.0.RELEASE</spring.framework.version>
		<mysql.driver.version>5.1.25</mysql.driver.version>
	</properties>

	<build>
		<plugins>
			<plugin>
				<!-- maven-compiler-plugin configured to: * use specific Java Version 
					* use specific target Java Version * use UTF-8 for java sources * use debug 
					compiler settings * do not use optimize compiler settings * show deprecated 
					informations (will build anyhow) -->
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<source>${project.java.version}</source>
					<target>${project.java.version}</target>
					<encoding>${project.build.sourceEncoding}</encoding>
					<debug>${maven.compiler.debug}</debug>
					<optimize>${maven.compiler.optimize}</optimize>
					<showDeprecation>true</showDeprecation>
				</configuration>
			</plugin>
			<plugin>
				<!-- To ensure all project resources will be used with UTF-8, we use 
					the maven-resources-plugin. -->
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.5</version>
				<configuration>
					<encoding>${project.build.sourceEncoding}</encoding>
				</configuration>
			</plugin>
			<plugin>
				<!-- maven-surefire-plugin configured to set * forkMode for clean context 
					per test in other projects i set the log4j file place and java arguments 
					for memory configuration too, but this is not needed for this simple hello-world 
					project -->
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.9</version>
				<configuration>
					<forkMode>${maven.surefire.forkmode}</forkMode>
				</configuration>
			</plugin>
			<plugin>
				<!-- create an all-in-one executable jar with maven-shade-plugin bound 
					to phase:package special handling for spring.handlers/spring.schemas files 
					to prevent overwriting (maven-shade-plugin joins them to one file) usage: 
					cd to <project>/target java -jar hello-world-java-1.0-executable.jar spring/batch/job/hello-world-job.xml 
					helloWorldJob -->
				<artifactId>maven-shade-plugin</artifactId>
				<version>1.5</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<transformers>
								<transformer
									implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
									<mainClass>org.springframework.batch.core.launch.support.CommandLineJobRunner</mainClass>
								</transformer>
								<transformer
									implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
									<resource>META-INF/spring.handlers</resource>
								</transformer>
								<transformer
									implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
									<resource>META-INF/spring.schemas</resource>
								</transformer>
							</transformers>
							<shadedArtifactAttached>true</shadedArtifactAttached>
							<!-- configures the suffix name for the executable jar here it will 
								be '<project.artifact>-<project.version>-executable.jar' -->
							<shadedClassifierName>executable</shadedClassifierName>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<!-- With the maven-enforcer-plugin i want to make sure the project is 
					built with maven 3+ and Java 1.6+. -->
				<artifactId>maven-enforcer-plugin</artifactId>
				<version>1.0.1</version>
				<executions>
					<execution>
						<id>enforce-maven</id>
						<goals>
							<goal>enforce</goal>
						</goals>
						<configuration>
							<rules>
								<requireJavaVersion>
									<version>${project.java.version}</version>
								</requireJavaVersion>
								<requireMavenVersion>
									<!-- right now the plugin reads the version as lowest allowed, so 
										there is no need to use fancy formats like: [3.0,) see http://maven.apache.org/plugins/maven-enforcer-plugin/rules/versionRanges.html -->
									<version>3.0.0</version>
								</requireMavenVersion>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	<dependencies>
		<!-- Spring (core) Framework dependencies -->
		<!-- references version property <spring.framework.version>3.0.6.RELEASE</spring.framework.version> 
			just replace ${spring.framework.version} with 3.1.0.RELEASE if you don't 
			want to use properties -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>${spring.framework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring.framework.version}</version>
		</dependency>
		<dependency>
			<!-- spring-jdbc specified, because spring-batch has older 2.5.6 version 
				configured, but we want the newer 3.1.0 here -->
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${spring.framework.version}</version>
		</dependency>
		<!-- Spring Batch dependencies -->
		<!-- references version property <spring.batch.version>2.1.8.RELEASE</spring.batch.version> 
			just replace ${spring.framework.version} with 2.1.8.RELEASE if you don't 
			want to use properties -->
		<dependency>
			<groupId>org.springframework.batch</groupId>
			<artifactId>spring-batch-core</artifactId>
			<version>${spring.batch.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.batch</groupId>
			<artifactId>spring-batch-infrastructure</artifactId>
			<version>${spring.batch.version}</version>
		</dependency>

		<!-- Spring XML to/back object -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-oxm</artifactId>
			<version>${spring.framework.version}</version>
		</dependency>
		
		<!-- MySQL database driver -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>${mysql.driver.version}</version>
		</dependency>

		<!-- Derby -->
		<dependency>
			<groupId>org.apache.derby</groupId>
			<artifactId>derbyclient</artifactId>
			<version>10.10.1.1</version>
		</dependency>

		<!-- test scoped dependencies -->
		<dependency>
			<groupId>org.springframework.batch</groupId>
			<artifactId>spring-batch-test</artifactId>
			<version>${spring.batch.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring.framework.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.10</version>
			<scope>test</scope>
		</dependency>
	</dependencies>
</project>
