<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xsi:schemaLocation="
       http://www.springframework.org/schema/batch 
       http://www.springframework.org/schema/batch/spring-batch-2.1.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

	<import resource="derby-config.xml" />

	<batch:job id="reportJob">
		<batch:step id="step1" next="step2">
			<batch:tasklet>
				<batch:chunk reader="xmlItemReader" writer="cvsFileItemWriter"
					processor="step1FilterReportProcessor" commit-interval="1">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
		<batch:step id="step2" next="step3">
			<batch:tasklet>
				<batch:chunk reader="cvsFileItemReader" writer="dbItemWriter"
					processor="step2FilterReportProcessor" commit-interval="2">
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
		<batch:step id="step3">
			<batch:tasklet ref="writeTotalIncome"/>
		</batch:step>
	</batch:job>

	<!-- Configs del step1 -->
	<bean id="writeTotalIncome" class="springbatch.basico.tasklet.WriteTotalIncomeTasklet">
		<property name="fileName" value="cvs/totalIncome.csv"/>
	</bean>
	
	<bean id="step1FilterReportProcessor" class="springbatch.basico.processor.Step1FilterReportProcessor" scope="step">
		<property name="excludeAge" value="#{jobParameters[excludeAge]}"/>
	</bean>

	<bean id="xmlItemReader" class="org.springframework.batch.item.xml.StaxEventItemReader">
		<property name="fragmentRootElementName" value="record" />
		<property name="resource" value="classpath:xml/report.xml" />
		<property name="unmarshaller" ref="reportUnmarshaller" />
	</bean>

	<!-- Read and map values to object, via jaxb2 -->
	<bean id="reportUnmarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
		<property name="classesToBeBound">
			<list>
				<value>springbatch.basico.model.Report</value>
			</list>
		</property>
	</bean>

	<bean id="cvsFileItemWriter" class="org.springframework.batch.item.file.FlatFileItemWriter">
		<!-- write to this csv file -->
		<property name="resource" value="file:cvs/report.csv" />
		<property name="shouldDeleteIfExists" value="true" />

		<property name="lineAggregator">
			<bean
				class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
				<property name="delimiter" value="," />
				<property name="fieldExtractor">
					<bean
						class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
						<property name="names" value="refId, name, age, csvDob, income" />
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<!-- Configs del step2 -->
	<bean id="report" class="springbatch.basico.model.Report" scope="prototype"/>
	
	<bean id="step2FilterReportProcessor" class="springbatch.basico.processor.Step2FilterReportProcessor" />
	
	<bean id="cvsFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">
		<!-- Read a csv file -->
		<property name="resource" value="file:cvs/report.csv" />

		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<!-- split it -->
				<property name="lineTokenizer">
					<bean
						class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
						<property name="names" value="refId, name, age, dob, income" />
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean
						class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
						<property name="prototypeBeanName" value="report" />
					</bean>
				</property>

			</bean>
		</property>
	</bean>


	<bean id="dbItemWriter"
		class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="dataSource" ref="dataSource" />
		<property name="sql">
			<value>
            <![CDATA[        
	           	INSERT INTO REPORT(refId, name, age, dob, income) 
				VALUES (:refId, :name, :age, :dob, :income)
            ]]>
			</value>
		</property>
		<!-- It will take care matching between object property and sql name parameter -->
		<property name="itemSqlParameterSourceProvider">
			<bean
				class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
		</property>
	</bean>

</beans>